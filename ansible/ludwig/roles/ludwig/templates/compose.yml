version: '3.9'
services:
  traefik:
    image: traefik:2.5
    container_name: traefik
    command:
      - --api=true
      - --api.dashboard=true
      - --api.insecure=true
      - --global.sendanonymoususage=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certresolver=njalla
      - --certificatesresolvers.njalla.acme.email=paul@alcock.dev
      - --certificatesresolvers.njalla.acme.dnschallenge.provider=njalla
      - --certificatesresolvers.njalla.acme.dnschallenge.delaybeforecheck=30
      - --certificatesresolvers.njalla.acme.storage=/etc/traefik/acme.json
      - --providers.docker.watch=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=podnet
      - "--entrypoints.websecure.http.tls.domains[0].main={{ domain }}"
      - "--entrypoints.websecure.http.tls.domains[0].sans=ludwig.{{ domain }},libreddit.{{ domain }},rss.{{ domain }},teddit{{ domain }},rssbridge.{{ domain }}"
        #      - --entrypoints.metrics.address=9100/tcp
        #      - --entrypoints.traefik.address=9000/tcp
    environment:
      - "NJALLA_TOKEN={{ njalla_token }}"
    labels:
      traefik.enable: true
      traefik.http.routers.api.entrypoints: websecure
      traefik.http.routers.api.service: api@internal
      #traefik.http.routers.api.rule: Host(`ludwig.alcock.dev`)
      #traefik.http.routers.api.middlewares: auth@docker
      #traefik.http.middlewares.auth.forwardauth.trustForwardHeader: true
      #traefik.http.middlewares.auth.basicauth.usersfile: /etc/traefik/usersfile
      #traefik.http.middlewares.auth.forwardauth.address: https://ombi.alcock.dev
      #traefik.http.middlewares.auth.basicauth.usersfile: /etc/traefik/usersfile
    restart: unless-stopped
    networks:
      "{{ br_name }}":
        ipv4_address: 172.23.0.43
    ports:
      - 443:443
      - 80:80
      - 8183:8183
    volumes:
      - "{{ config_path }}/traefik:/etc/traefik"
      - "/var/run/podman/podman.sock:/var/run/docker.sock:ro"

  libreddit:
    image: docker.io/spikecodes/libreddit:arm
    container_name: libreddit
    environment:
      TZ: Europe/London
      LIBREDDIT_DEFAULT_SHOW_NSFW: "on"
      LIBREDDIT_DEFAULT_THEME: "dark"
      LIBREDDIT_DEFAULT_USE_HLS: "on"
    restart: unless-stopped
    networks:
      "{{ br_name }}":
        ipv4_address: 172.23.0.5
    command: libreddit --port 8090
    labels:
      traefik.enable: true
      traefik.docker.network: "{{ br_name }}"
      traefik.http.routers.libreddit.rule: "Host(`libreddit.{{ domain }}`)"
      traefik.http.routers.libreddit.entrypoints: "{{ traefik.securename }}"
      traefik.http.routers.libreddit.tls: true
      traefik.http.routers.libreddit.tls.certresolver: njalla
      traefik.http.services.libreddit.loadbalancer.server.port: 8090

  freshrss:
    image: lscr.io/linuxserver/freshrss:latest
    container_name: freshrss
    environment:
      - TZ=Europe/London
    restart: unless-stopped
    networks:
      "{{ br_name }}":
        ipv4_address: 172.23.0.85
    volumes:
      - "{{ config_path }}/freshrss/config:/config"
    extra_hosts:
      - "teddit.net:172.23.0.87"
    labels:
      traefik.enable: true
      traefik.docker.network: "{{ br_name }}"
      traefik.http.routers.freshrss.rule: "Host(`rss.{{ domain }}`) || Host(`ludwig.{{ domain }}`) && Path(`/freshrss`)"
      traefik.http.routers.freshrss.entrypoints: "{{ traefik.securename }}"
      traefik.http.routers.freshrss.tls: true
      traefik.http.routers.freshrss.tls.certresolver: njalla
      traefik.http.services.freshrss.loadbalancer.server.port: 80

  rss-bridge:
    image: docker.io/rssbridge/rss-bridge
    container_name: rss-bridge
    environment:
      - TZ=Europe/London
    restart: unless-stopped
    networks:
      "{{ br_name }}":
        ipv4_address: 172.23.0.86
    volumes:
      - "{{ config_path }}/rss-bridge/whitelist.txt:/app/whitelist.txt"
    labels:
      traefik.enable: true
      traefik.docker.network: "{{ br_name }}"
      traefik.http.routers.rssbridge.rule: "Host(`rssbridge.{{ domain }}`)"
      traefik.http.routers.rssbridge.entrypoints: "{{ traefik.securename }}"
      traefik.http.routers.rssbridge.tls: true
      traefik.http.routers.rssbridge.tls.certresolver: njalla
      traefik.http.services.rssbridge.loadbalancer.server.port: 80

  teddit:
    image: docker.io/teddit/teddit
    container_name: teddit
    environment:
      - TZ=Europe/London
      - "REDIS_DB={{ redis.name }}"
      - "REDIS_HOST={{ redis.ip }}"
      - "REDIS_PORT={{ redis.port }}"
      - "NONSSL_PORT=80"
    restart: unless-stopped
    networks:
      "{{ br_name }}":
        ipv4_address: 172.23.0.87
    labels:
      traefik.enable: true
      traefik.docker.network: "{{ br_name }}"
      traefik.http.routers.rssbridge.rule: "Host(`teddit.{{ domain }}`)"
      traefik.http.routers.rssbridge.entrypoints: "{{ traefik.securename }}"
      traefik.http.routers.rssbridge.tls: true
      traefik.http.routers.rssbridge.tls.certresolver: njalla
      traefik.http.services.rssbridge.loadbalancer.server.port: 80

  postgres:
    image: docker.io/postgres
    container_name: postgres
    environment:
      TZ: Europe/London
      POSTGRES_PASSWORD: "{{ postgres.password }}" 
    restart: unless-stopped
    networks:
      "{{ br_name }}":
        ipv4_address: 172.23.0.228
    volumes:
      - postgres:/var/lib/postgresql/data

  redis:
    image: docker.io/redis
    container_name: redis
    environment:
      TZ: Europe/London
    restart: unless-stopped
    networks:
      "{{ br_name }}":
        ipv4_address: "{{ redis.ip }}"
    

volumes:
  postgres:
    driver: local

networks:
  "{{ br_name }}":
    external:
      name: "{{ br_name }}"
